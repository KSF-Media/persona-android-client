/**
 * Persona
 * KSF Media unified login service
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.CancelSubscriptionReason;
import java.util.Date;
import org.openapitools.client.model.DeleteTempAddressChangeDates;
import org.openapitools.client.model.DeliveryReclamation;
import org.openapitools.client.model.GdprConsent;
import org.openapitools.client.model.InlineResponse400;
import org.openapitools.client.model.InlineResponse415;
import org.openapitools.client.model.LegalConsent;
import java.util.*;
import org.openapitools.client.model.LoginResponse;
import org.openapitools.client.model.NewDeliveryReclamation;
import org.openapitools.client.model.NewTemporaryUser;
import org.openapitools.client.model.NewUser;
import org.openapitools.client.model.NewsletterSubscriptions;
import org.openapitools.client.model.Subscription;
import org.openapitools.client.model.SubscriptionPauseDates;
import org.openapitools.client.model.SubscriptionPauseEdit;
import org.openapitools.client.model.SubscriptionPayments;
import org.openapitools.client.model.TemporaryAddressChange;
import org.openapitools.client.model.TemporaryAddressChangeDates;
import java.util.UUID;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserUpdate;
import org.openapitools.client.model.UserUpdatePassword;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class UsersApi {
  String basePath = "http://http:/v1";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Create a new user.
  * 
   * @param body 
   * @return LoginResponse
  */
  public LoginResponse usersPost (NewUser body) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling usersPost",
        new ApiException(400, "Missing the required parameter 'body' when calling usersPost"));
    }

    // create path and map variables
    String path = "/users";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json;charset=utf-8"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (LoginResponse) ApiInvoker.deserialize(localVarResponse, "", LoginResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create a new user.
   * 
   * @param body 
  */
  public void usersPost (NewUser body, final Response.Listener<LoginResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling usersPost",
        new ApiException(400, "Missing the required parameter 'body' when calling usersPost"));
    }

    // create path and map variables
    String path = "/users".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json;charset=utf-8"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((LoginResponse) ApiInvoker.deserialize(localVarResponse,  "", LoginResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create a new user with email.
  * 
   * @param body 
   * @return LoginResponse
  */
  public LoginResponse usersTemporaryPost (NewTemporaryUser body) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling usersTemporaryPost",
        new ApiException(400, "Missing the required parameter 'body' when calling usersTemporaryPost"));
    }

    // create path and map variables
    String path = "/users/temporary";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json;charset=utf-8"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (LoginResponse) ApiInvoker.deserialize(localVarResponse, "", LoginResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create a new user with email.
   * 
   * @param body 
  */
  public void usersTemporaryPost (NewTemporaryUser body, final Response.Listener<LoginResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling usersTemporaryPost",
        new ApiException(400, "Missing the required parameter 'body' when calling usersTemporaryPost"));
    }

    // create path and map variables
    String path = "/users/temporary".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json;charset=utf-8"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((LoginResponse) ApiInvoker.deserialize(localVarResponse,  "", LoginResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get users entitlements.
  * Authorization header expects the following format ‘OAuth {token}’
   * @param uuid 
   * @param authUser 
   * @param authorization 
   * @param cacheControl 
   * @return List<String>
  */
  public List<String> usersUuidEntitlementGet (UUID uuid, UUID authUser, String authorization, String cacheControl) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidEntitlementGet",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidEntitlementGet"));
    }

    // create path and map variables
    String path = "/users/{uuid}/entitlement".replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("AuthUser", ApiInvoker.parameterToString(authUser));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Cache-Control", ApiInvoker.parameterToString(cacheControl));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<String>) ApiInvoker.deserialize(localVarResponse, "array", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get users entitlements.
   * Authorization header expects the following format ‘OAuth {token}’
   * @param uuid    * @param authUser    * @param authorization    * @param cacheControl 
  */
  public void usersUuidEntitlementGet (UUID uuid, UUID authUser, String authorization, String cacheControl, final Response.Listener<List<String>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidEntitlementGet",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidEntitlementGet"));
    }

    // create path and map variables
    String path = "/users/{uuid}/entitlement".replaceAll("\\{format\\}","json").replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("AuthUser", ApiInvoker.parameterToString(authUser));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Cache-Control", ApiInvoker.parameterToString(cacheControl));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<String>) ApiInvoker.deserialize(localVarResponse,  "array", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Updates the GDPR consent settings for a given user.
  * Authorization header expects the following format ‘OAuth {token}’
   * @param uuid 
   * @param body 
   * @param authUser 
   * @param authorization 
   * @return User
  */
  public User usersUuidGdprPut (UUID uuid, List<GdprConsent> body, UUID authUser, String authorization) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidGdprPut",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidGdprPut"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling usersUuidGdprPut",
        new ApiException(400, "Missing the required parameter 'body' when calling usersUuidGdprPut"));
    }

    // create path and map variables
    String path = "/users/{uuid}/gdpr".replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("AuthUser", ApiInvoker.parameterToString(authUser));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    String[] contentTypes = {
      "application/json;charset=utf-8"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (User) ApiInvoker.deserialize(localVarResponse, "", User.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Updates the GDPR consent settings for a given user.
   * Authorization header expects the following format ‘OAuth {token}’
   * @param uuid    * @param body    * @param authUser    * @param authorization 
  */
  public void usersUuidGdprPut (UUID uuid, List<GdprConsent> body, UUID authUser, String authorization, final Response.Listener<User> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidGdprPut",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidGdprPut"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling usersUuidGdprPut",
        new ApiException(400, "Missing the required parameter 'body' when calling usersUuidGdprPut"));
    }

    // create path and map variables
    String path = "/users/{uuid}/gdpr".replaceAll("\\{format\\}","json").replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("AuthUser", ApiInvoker.parameterToString(authUser));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      "application/json;charset=utf-8"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((User) ApiInvoker.deserialize(localVarResponse,  "", User.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get user by UUID.
  * Authorization header expects the following format ‘OAuth {token}’
   * @param uuid 
   * @param authUser 
   * @param authorization 
   * @param cacheControl 
   * @return User
  */
  public User usersUuidGet (UUID uuid, UUID authUser, String authorization, String cacheControl) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidGet",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidGet"));
    }

    // create path and map variables
    String path = "/users/{uuid}".replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("AuthUser", ApiInvoker.parameterToString(authUser));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Cache-Control", ApiInvoker.parameterToString(cacheControl));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (User) ApiInvoker.deserialize(localVarResponse, "", User.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get user by UUID.
   * Authorization header expects the following format ‘OAuth {token}’
   * @param uuid    * @param authUser    * @param authorization    * @param cacheControl 
  */
  public void usersUuidGet (UUID uuid, UUID authUser, String authorization, String cacheControl, final Response.Listener<User> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidGet",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidGet"));
    }

    // create path and map variables
    String path = "/users/{uuid}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("AuthUser", ApiInvoker.parameterToString(authUser));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    headerParams.put("Cache-Control", ApiInvoker.parameterToString(cacheControl));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((User) ApiInvoker.deserialize(localVarResponse,  "", User.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Updates the legal consent settings for a given user.
  * Authorization header expects the following format ‘OAuth {token}’
   * @param uuid 
   * @param body 
   * @param authUser 
   * @param authorization 
   * @return User
  */
  public User usersUuidLegalPut (UUID uuid, List<LegalConsent> body, UUID authUser, String authorization) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidLegalPut",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidLegalPut"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling usersUuidLegalPut",
        new ApiException(400, "Missing the required parameter 'body' when calling usersUuidLegalPut"));
    }

    // create path and map variables
    String path = "/users/{uuid}/legal".replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("AuthUser", ApiInvoker.parameterToString(authUser));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    String[] contentTypes = {
      "application/json;charset=utf-8"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (User) ApiInvoker.deserialize(localVarResponse, "", User.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Updates the legal consent settings for a given user.
   * Authorization header expects the following format ‘OAuth {token}’
   * @param uuid    * @param body    * @param authUser    * @param authorization 
  */
  public void usersUuidLegalPut (UUID uuid, List<LegalConsent> body, UUID authUser, String authorization, final Response.Listener<User> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidLegalPut",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidLegalPut"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling usersUuidLegalPut",
        new ApiException(400, "Missing the required parameter 'body' when calling usersUuidLegalPut"));
    }

    // create path and map variables
    String path = "/users/{uuid}/legal".replaceAll("\\{format\\}","json").replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("AuthUser", ApiInvoker.parameterToString(authUser));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      "application/json;charset=utf-8"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((User) ApiInvoker.deserialize(localVarResponse,  "", User.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get newsletter subscriptions
  * Get list of newsletter subscriptions from mailchimp
   * @param uuid 
   * @param authUser 
   * @param authorization 
   * @return NewsletterSubscriptions
  */
  public NewsletterSubscriptions usersUuidNewslettersGet (UUID uuid, UUID authUser, String authorization) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidNewslettersGet",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidNewslettersGet"));
    }

    // create path and map variables
    String path = "/users/{uuid}/newsletters".replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("AuthUser", ApiInvoker.parameterToString(authUser));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (NewsletterSubscriptions) ApiInvoker.deserialize(localVarResponse, "", NewsletterSubscriptions.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get newsletter subscriptions
   * Get list of newsletter subscriptions from mailchimp
   * @param uuid    * @param authUser    * @param authorization 
  */
  public void usersUuidNewslettersGet (UUID uuid, UUID authUser, String authorization, final Response.Listener<NewsletterSubscriptions> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidNewslettersGet",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidNewslettersGet"));
    }

    // create path and map variables
    String path = "/users/{uuid}/newsletters".replaceAll("\\{format\\}","json").replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("AuthUser", ApiInvoker.parameterToString(authUser));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((NewsletterSubscriptions) ApiInvoker.deserialize(localVarResponse,  "", NewsletterSubscriptions.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update newsletter subscriptions
  * Get list of newsletter subscriptions from mailchimp
   * @param uuid 
   * @param body 
   * @param authUser 
   * @param authorization 
   * @return NewsletterSubscriptions
  */
  public NewsletterSubscriptions usersUuidNewslettersPut (UUID uuid, NewsletterSubscriptions body, UUID authUser, String authorization) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidNewslettersPut",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidNewslettersPut"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling usersUuidNewslettersPut",
        new ApiException(400, "Missing the required parameter 'body' when calling usersUuidNewslettersPut"));
    }

    // create path and map variables
    String path = "/users/{uuid}/newsletters".replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("AuthUser", ApiInvoker.parameterToString(authUser));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    String[] contentTypes = {
      "application/json;charset=utf-8"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (NewsletterSubscriptions) ApiInvoker.deserialize(localVarResponse, "", NewsletterSubscriptions.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update newsletter subscriptions
   * Get list of newsletter subscriptions from mailchimp
   * @param uuid    * @param body    * @param authUser    * @param authorization 
  */
  public void usersUuidNewslettersPut (UUID uuid, NewsletterSubscriptions body, UUID authUser, String authorization, final Response.Listener<NewsletterSubscriptions> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidNewslettersPut",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidNewslettersPut"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling usersUuidNewslettersPut",
        new ApiException(400, "Missing the required parameter 'body' when calling usersUuidNewslettersPut"));
    }

    // create path and map variables
    String path = "/users/{uuid}/newsletters".replaceAll("\\{format\\}","json").replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("AuthUser", ApiInvoker.parameterToString(authUser));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      "application/json;charset=utf-8"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((NewsletterSubscriptions) ApiInvoker.deserialize(localVarResponse,  "", NewsletterSubscriptions.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Set / Change user password
  * Authorization header expects the following format ‘OAuth {token}’
   * @param uuid 
   * @param body 
   * @param authUser 
   * @param authorization 
   * @return User
  */
  public User usersUuidPasswordPut (UUID uuid, UserUpdatePassword body, UUID authUser, String authorization) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidPasswordPut",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidPasswordPut"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling usersUuidPasswordPut",
        new ApiException(400, "Missing the required parameter 'body' when calling usersUuidPasswordPut"));
    }

    // create path and map variables
    String path = "/users/{uuid}/password".replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("AuthUser", ApiInvoker.parameterToString(authUser));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    String[] contentTypes = {
      "application/json;charset=utf-8"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (User) ApiInvoker.deserialize(localVarResponse, "", User.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Set / Change user password
   * Authorization header expects the following format ‘OAuth {token}’
   * @param uuid    * @param body    * @param authUser    * @param authorization 
  */
  public void usersUuidPasswordPut (UUID uuid, UserUpdatePassword body, UUID authUser, String authorization, final Response.Listener<User> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidPasswordPut",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidPasswordPut"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling usersUuidPasswordPut",
        new ApiException(400, "Missing the required parameter 'body' when calling usersUuidPasswordPut"));
    }

    // create path and map variables
    String path = "/users/{uuid}/password".replaceAll("\\{format\\}","json").replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("AuthUser", ApiInvoker.parameterToString(authUser));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      "application/json;charset=utf-8"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((User) ApiInvoker.deserialize(localVarResponse,  "", User.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update a user
  * Authorization header expects the following format ‘OAuth {token}’
   * @param uuid 
   * @param body 
   * @param authUser 
   * @param authorization 
   * @return User
  */
  public User usersUuidPatch (UUID uuid, UserUpdate body, UUID authUser, String authorization) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidPatch",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidPatch"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling usersUuidPatch",
        new ApiException(400, "Missing the required parameter 'body' when calling usersUuidPatch"));
    }

    // create path and map variables
    String path = "/users/{uuid}".replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("AuthUser", ApiInvoker.parameterToString(authUser));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    String[] contentTypes = {
      "application/json;charset=utf-8"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (User) ApiInvoker.deserialize(localVarResponse, "", User.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update a user
   * Authorization header expects the following format ‘OAuth {token}’
   * @param uuid    * @param body    * @param authUser    * @param authorization 
  */
  public void usersUuidPatch (UUID uuid, UserUpdate body, UUID authUser, String authorization, final Response.Listener<User> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidPatch",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidPatch"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling usersUuidPatch",
        new ApiException(400, "Missing the required parameter 'body' when calling usersUuidPatch"));
    }

    // create path and map variables
    String path = "/users/{uuid}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("AuthUser", ApiInvoker.parameterToString(authUser));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      "application/json;charset=utf-8"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((User) ApiInvoker.deserialize(localVarResponse,  "", User.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get user&#39;s subscriptions and payment events
  * Authorization header expects the following format ‘OAuth {token}’
   * @param uuid 
   * @param authUser 
   * @param authorization 
   * @return List<SubscriptionPayments>
  */
  public List<SubscriptionPayments> usersUuidPaymentsGet (UUID uuid, UUID authUser, String authorization) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidPaymentsGet",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidPaymentsGet"));
    }

    // create path and map variables
    String path = "/users/{uuid}/payments".replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("AuthUser", ApiInvoker.parameterToString(authUser));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<SubscriptionPayments>) ApiInvoker.deserialize(localVarResponse, "array", SubscriptionPayments.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get user&#39;s subscriptions and payment events
   * Authorization header expects the following format ‘OAuth {token}’
   * @param uuid    * @param authUser    * @param authorization 
  */
  public void usersUuidPaymentsGet (UUID uuid, UUID authUser, String authorization, final Response.Listener<List<SubscriptionPayments>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidPaymentsGet",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidPaymentsGet"));
    }

    // create path and map variables
    String path = "/users/{uuid}/payments".replaceAll("\\{format\\}","json").replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("AuthUser", ApiInvoker.parameterToString(authUser));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<SubscriptionPayments>) ApiInvoker.deserialize(localVarResponse,  "array", SubscriptionPayments.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Check if user has valid token for a scope
  * Authorization header expects the following format ‘OAuth {token}’
   * @param uuid 
   * @param authorization 
   * @param scope 
   * @return Integer
  */
  public Integer usersUuidScopeGet (UUID uuid, String authorization, String scope) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidScopeGet",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidScopeGet"));
    }

    // create path and map variables
    String path = "/users/{uuid}/scope".replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "scope", scope));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Integer) ApiInvoker.deserialize(localVarResponse, "", Integer.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Check if user has valid token for a scope
   * Authorization header expects the following format ‘OAuth {token}’
   * @param uuid    * @param authorization    * @param scope 
  */
  public void usersUuidScopeGet (UUID uuid, String authorization, String scope, final Response.Listener<Integer> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidScopeGet",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidScopeGet"));
    }

    // create path and map variables
    String path = "/users/{uuid}/scope".replaceAll("\\{format\\}","json").replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "scope", scope));

    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Integer) ApiInvoker.deserialize(localVarResponse,  "", Integer.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete temporary address change for subscription
  * Authorization header expects the following format ‘OAuth {token}’
   * @param uuid 
   * @param subsno 
   * @param body 
   * @param authUser 
   * @param authorization 
   * @return Subscription
  */
  public Subscription usersUuidSubscriptionsSubsnoAddressChangeDelete (UUID uuid, Integer subsno, DeleteTempAddressChangeDates body, UUID authUser, String authorization) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidSubscriptionsSubsnoAddressChangeDelete",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidSubscriptionsSubsnoAddressChangeDelete"));
    }
    // verify the required parameter 'subsno' is set
    if (subsno == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'subsno' when calling usersUuidSubscriptionsSubsnoAddressChangeDelete",
        new ApiException(400, "Missing the required parameter 'subsno' when calling usersUuidSubscriptionsSubsnoAddressChangeDelete"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling usersUuidSubscriptionsSubsnoAddressChangeDelete",
        new ApiException(400, "Missing the required parameter 'body' when calling usersUuidSubscriptionsSubsnoAddressChangeDelete"));
    }

    // create path and map variables
    String path = "/users/{uuid}/subscriptions/{subsno}/addressChange".replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString())).replaceAll("\\{" + "subsno" + "\\}", apiInvoker.escapeString(subsno.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("AuthUser", ApiInvoker.parameterToString(authUser));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    String[] contentTypes = {
      "application/json;charset=utf-8"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Subscription) ApiInvoker.deserialize(localVarResponse, "", Subscription.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete temporary address change for subscription
   * Authorization header expects the following format ‘OAuth {token}’
   * @param uuid    * @param subsno    * @param body    * @param authUser    * @param authorization 
  */
  public void usersUuidSubscriptionsSubsnoAddressChangeDelete (UUID uuid, Integer subsno, DeleteTempAddressChangeDates body, UUID authUser, String authorization, final Response.Listener<Subscription> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidSubscriptionsSubsnoAddressChangeDelete",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidSubscriptionsSubsnoAddressChangeDelete"));
    }
    // verify the required parameter 'subsno' is set
    if (subsno == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'subsno' when calling usersUuidSubscriptionsSubsnoAddressChangeDelete",
        new ApiException(400, "Missing the required parameter 'subsno' when calling usersUuidSubscriptionsSubsnoAddressChangeDelete"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling usersUuidSubscriptionsSubsnoAddressChangeDelete",
        new ApiException(400, "Missing the required parameter 'body' when calling usersUuidSubscriptionsSubsnoAddressChangeDelete"));
    }

    // create path and map variables
    String path = "/users/{uuid}/subscriptions/{subsno}/addressChange".replaceAll("\\{format\\}","json").replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString())).replaceAll("\\{" + "subsno" + "\\}", apiInvoker.escapeString(subsno.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("AuthUser", ApiInvoker.parameterToString(authUser));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      "application/json;charset=utf-8"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Subscription) ApiInvoker.deserialize(localVarResponse,  "", Subscription.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Edit temporary address change dates of a subscription
  * Authorization header expects the following format ‘OAuth {token}’
   * @param uuid 
   * @param subsno 
   * @param body 
   * @param authUser 
   * @param authorization 
   * @return Subscription
  */
  public Subscription usersUuidSubscriptionsSubsnoAddressChangePatch (UUID uuid, Integer subsno, TemporaryAddressChangeDates body, UUID authUser, String authorization) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidSubscriptionsSubsnoAddressChangePatch",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidSubscriptionsSubsnoAddressChangePatch"));
    }
    // verify the required parameter 'subsno' is set
    if (subsno == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'subsno' when calling usersUuidSubscriptionsSubsnoAddressChangePatch",
        new ApiException(400, "Missing the required parameter 'subsno' when calling usersUuidSubscriptionsSubsnoAddressChangePatch"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling usersUuidSubscriptionsSubsnoAddressChangePatch",
        new ApiException(400, "Missing the required parameter 'body' when calling usersUuidSubscriptionsSubsnoAddressChangePatch"));
    }

    // create path and map variables
    String path = "/users/{uuid}/subscriptions/{subsno}/addressChange".replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString())).replaceAll("\\{" + "subsno" + "\\}", apiInvoker.escapeString(subsno.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("AuthUser", ApiInvoker.parameterToString(authUser));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    String[] contentTypes = {
      "application/json;charset=utf-8"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Subscription) ApiInvoker.deserialize(localVarResponse, "", Subscription.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Edit temporary address change dates of a subscription
   * Authorization header expects the following format ‘OAuth {token}’
   * @param uuid    * @param subsno    * @param body    * @param authUser    * @param authorization 
  */
  public void usersUuidSubscriptionsSubsnoAddressChangePatch (UUID uuid, Integer subsno, TemporaryAddressChangeDates body, UUID authUser, String authorization, final Response.Listener<Subscription> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidSubscriptionsSubsnoAddressChangePatch",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidSubscriptionsSubsnoAddressChangePatch"));
    }
    // verify the required parameter 'subsno' is set
    if (subsno == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'subsno' when calling usersUuidSubscriptionsSubsnoAddressChangePatch",
        new ApiException(400, "Missing the required parameter 'subsno' when calling usersUuidSubscriptionsSubsnoAddressChangePatch"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling usersUuidSubscriptionsSubsnoAddressChangePatch",
        new ApiException(400, "Missing the required parameter 'body' when calling usersUuidSubscriptionsSubsnoAddressChangePatch"));
    }

    // create path and map variables
    String path = "/users/{uuid}/subscriptions/{subsno}/addressChange".replaceAll("\\{format\\}","json").replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString())).replaceAll("\\{" + "subsno" + "\\}", apiInvoker.escapeString(subsno.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("AuthUser", ApiInvoker.parameterToString(authUser));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      "application/json;charset=utf-8"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Subscription) ApiInvoker.deserialize(localVarResponse,  "", Subscription.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Make a temporary address change for a subscription
  * Authorization header expects the following format ‘OAuth {token}’
   * @param uuid 
   * @param subsno 
   * @param body 
   * @param authUser 
   * @param authorization 
   * @return Subscription
  */
  public Subscription usersUuidSubscriptionsSubsnoAddressChangePost (UUID uuid, Integer subsno, TemporaryAddressChange body, UUID authUser, String authorization) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidSubscriptionsSubsnoAddressChangePost",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidSubscriptionsSubsnoAddressChangePost"));
    }
    // verify the required parameter 'subsno' is set
    if (subsno == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'subsno' when calling usersUuidSubscriptionsSubsnoAddressChangePost",
        new ApiException(400, "Missing the required parameter 'subsno' when calling usersUuidSubscriptionsSubsnoAddressChangePost"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling usersUuidSubscriptionsSubsnoAddressChangePost",
        new ApiException(400, "Missing the required parameter 'body' when calling usersUuidSubscriptionsSubsnoAddressChangePost"));
    }

    // create path and map variables
    String path = "/users/{uuid}/subscriptions/{subsno}/addressChange".replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString())).replaceAll("\\{" + "subsno" + "\\}", apiInvoker.escapeString(subsno.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("AuthUser", ApiInvoker.parameterToString(authUser));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    String[] contentTypes = {
      "application/json;charset=utf-8"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Subscription) ApiInvoker.deserialize(localVarResponse, "", Subscription.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Make a temporary address change for a subscription
   * Authorization header expects the following format ‘OAuth {token}’
   * @param uuid    * @param subsno    * @param body    * @param authUser    * @param authorization 
  */
  public void usersUuidSubscriptionsSubsnoAddressChangePost (UUID uuid, Integer subsno, TemporaryAddressChange body, UUID authUser, String authorization, final Response.Listener<Subscription> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidSubscriptionsSubsnoAddressChangePost",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidSubscriptionsSubsnoAddressChangePost"));
    }
    // verify the required parameter 'subsno' is set
    if (subsno == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'subsno' when calling usersUuidSubscriptionsSubsnoAddressChangePost",
        new ApiException(400, "Missing the required parameter 'subsno' when calling usersUuidSubscriptionsSubsnoAddressChangePost"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling usersUuidSubscriptionsSubsnoAddressChangePost",
        new ApiException(400, "Missing the required parameter 'body' when calling usersUuidSubscriptionsSubsnoAddressChangePost"));
    }

    // create path and map variables
    String path = "/users/{uuid}/subscriptions/{subsno}/addressChange".replaceAll("\\{format\\}","json").replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString())).replaceAll("\\{" + "subsno" + "\\}", apiInvoker.escapeString(subsno.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("AuthUser", ApiInvoker.parameterToString(authUser));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      "application/json;charset=utf-8"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Subscription) ApiInvoker.deserialize(localVarResponse,  "", Subscription.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Cancels user subscription
  * The subscription continues to be valid until the end of the billing period. Authorization header expects the following format ‘OAuth {token}’
   * @param uuid 
   * @param subsno 
   * @param body 
   * @param authUser 
   * @param authorization 
   * @return Subscription
  */
  public Subscription usersUuidSubscriptionsSubsnoCancelPut (UUID uuid, Integer subsno, CancelSubscriptionReason body, UUID authUser, String authorization) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidSubscriptionsSubsnoCancelPut",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidSubscriptionsSubsnoCancelPut"));
    }
    // verify the required parameter 'subsno' is set
    if (subsno == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'subsno' when calling usersUuidSubscriptionsSubsnoCancelPut",
        new ApiException(400, "Missing the required parameter 'subsno' when calling usersUuidSubscriptionsSubsnoCancelPut"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling usersUuidSubscriptionsSubsnoCancelPut",
        new ApiException(400, "Missing the required parameter 'body' when calling usersUuidSubscriptionsSubsnoCancelPut"));
    }

    // create path and map variables
    String path = "/users/{uuid}/subscriptions/{subsno}/cancel".replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString())).replaceAll("\\{" + "subsno" + "\\}", apiInvoker.escapeString(subsno.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("AuthUser", ApiInvoker.parameterToString(authUser));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    String[] contentTypes = {
      "application/json;charset=utf-8"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Subscription) ApiInvoker.deserialize(localVarResponse, "", Subscription.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Cancels user subscription
   * The subscription continues to be valid until the end of the billing period. Authorization header expects the following format ‘OAuth {token}’
   * @param uuid    * @param subsno    * @param body    * @param authUser    * @param authorization 
  */
  public void usersUuidSubscriptionsSubsnoCancelPut (UUID uuid, Integer subsno, CancelSubscriptionReason body, UUID authUser, String authorization, final Response.Listener<Subscription> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidSubscriptionsSubsnoCancelPut",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidSubscriptionsSubsnoCancelPut"));
    }
    // verify the required parameter 'subsno' is set
    if (subsno == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'subsno' when calling usersUuidSubscriptionsSubsnoCancelPut",
        new ApiException(400, "Missing the required parameter 'subsno' when calling usersUuidSubscriptionsSubsnoCancelPut"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling usersUuidSubscriptionsSubsnoCancelPut",
        new ApiException(400, "Missing the required parameter 'body' when calling usersUuidSubscriptionsSubsnoCancelPut"));
    }

    // create path and map variables
    String path = "/users/{uuid}/subscriptions/{subsno}/cancel".replaceAll("\\{format\\}","json").replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString())).replaceAll("\\{" + "subsno" + "\\}", apiInvoker.escapeString(subsno.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("AuthUser", ApiInvoker.parameterToString(authUser));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      "application/json;charset=utf-8"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Subscription) ApiInvoker.deserialize(localVarResponse,  "", Subscription.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Edit pause duration
  * Authorization header expects the following format ‘OAuth {token}’
   * @param uuid 
   * @param subsno 
   * @param body 
   * @param authUser 
   * @param authorization 
   * @return Subscription
  */
  public Subscription usersUuidSubscriptionsSubsnoPausePatch (UUID uuid, Integer subsno, SubscriptionPauseEdit body, UUID authUser, String authorization) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidSubscriptionsSubsnoPausePatch",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidSubscriptionsSubsnoPausePatch"));
    }
    // verify the required parameter 'subsno' is set
    if (subsno == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'subsno' when calling usersUuidSubscriptionsSubsnoPausePatch",
        new ApiException(400, "Missing the required parameter 'subsno' when calling usersUuidSubscriptionsSubsnoPausePatch"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling usersUuidSubscriptionsSubsnoPausePatch",
        new ApiException(400, "Missing the required parameter 'body' when calling usersUuidSubscriptionsSubsnoPausePatch"));
    }

    // create path and map variables
    String path = "/users/{uuid}/subscriptions/{subsno}/pause".replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString())).replaceAll("\\{" + "subsno" + "\\}", apiInvoker.escapeString(subsno.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("AuthUser", ApiInvoker.parameterToString(authUser));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    String[] contentTypes = {
      "application/json;charset=utf-8"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Subscription) ApiInvoker.deserialize(localVarResponse, "", Subscription.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Edit pause duration
   * Authorization header expects the following format ‘OAuth {token}’
   * @param uuid    * @param subsno    * @param body    * @param authUser    * @param authorization 
  */
  public void usersUuidSubscriptionsSubsnoPausePatch (UUID uuid, Integer subsno, SubscriptionPauseEdit body, UUID authUser, String authorization, final Response.Listener<Subscription> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidSubscriptionsSubsnoPausePatch",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidSubscriptionsSubsnoPausePatch"));
    }
    // verify the required parameter 'subsno' is set
    if (subsno == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'subsno' when calling usersUuidSubscriptionsSubsnoPausePatch",
        new ApiException(400, "Missing the required parameter 'subsno' when calling usersUuidSubscriptionsSubsnoPausePatch"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling usersUuidSubscriptionsSubsnoPausePatch",
        new ApiException(400, "Missing the required parameter 'body' when calling usersUuidSubscriptionsSubsnoPausePatch"));
    }

    // create path and map variables
    String path = "/users/{uuid}/subscriptions/{subsno}/pause".replaceAll("\\{format\\}","json").replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString())).replaceAll("\\{" + "subsno" + "\\}", apiInvoker.escapeString(subsno.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("AuthUser", ApiInvoker.parameterToString(authUser));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      "application/json;charset=utf-8"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Subscription) ApiInvoker.deserialize(localVarResponse,  "", Subscription.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Pause users subscription
  * Authorization header expects the following format ‘OAuth {token}’
   * @param uuid 
   * @param subsno 
   * @param body 
   * @param authUser 
   * @param authorization 
   * @return Subscription
  */
  public Subscription usersUuidSubscriptionsSubsnoPausePost (UUID uuid, Integer subsno, SubscriptionPauseDates body, UUID authUser, String authorization) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidSubscriptionsSubsnoPausePost",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidSubscriptionsSubsnoPausePost"));
    }
    // verify the required parameter 'subsno' is set
    if (subsno == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'subsno' when calling usersUuidSubscriptionsSubsnoPausePost",
        new ApiException(400, "Missing the required parameter 'subsno' when calling usersUuidSubscriptionsSubsnoPausePost"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling usersUuidSubscriptionsSubsnoPausePost",
        new ApiException(400, "Missing the required parameter 'body' when calling usersUuidSubscriptionsSubsnoPausePost"));
    }

    // create path and map variables
    String path = "/users/{uuid}/subscriptions/{subsno}/pause".replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString())).replaceAll("\\{" + "subsno" + "\\}", apiInvoker.escapeString(subsno.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("AuthUser", ApiInvoker.parameterToString(authUser));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    String[] contentTypes = {
      "application/json;charset=utf-8"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Subscription) ApiInvoker.deserialize(localVarResponse, "", Subscription.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Pause users subscription
   * Authorization header expects the following format ‘OAuth {token}’
   * @param uuid    * @param subsno    * @param body    * @param authUser    * @param authorization 
  */
  public void usersUuidSubscriptionsSubsnoPausePost (UUID uuid, Integer subsno, SubscriptionPauseDates body, UUID authUser, String authorization, final Response.Listener<Subscription> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidSubscriptionsSubsnoPausePost",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidSubscriptionsSubsnoPausePost"));
    }
    // verify the required parameter 'subsno' is set
    if (subsno == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'subsno' when calling usersUuidSubscriptionsSubsnoPausePost",
        new ApiException(400, "Missing the required parameter 'subsno' when calling usersUuidSubscriptionsSubsnoPausePost"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling usersUuidSubscriptionsSubsnoPausePost",
        new ApiException(400, "Missing the required parameter 'body' when calling usersUuidSubscriptionsSubsnoPausePost"));
    }

    // create path and map variables
    String path = "/users/{uuid}/subscriptions/{subsno}/pause".replaceAll("\\{format\\}","json").replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString())).replaceAll("\\{" + "subsno" + "\\}", apiInvoker.escapeString(subsno.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("AuthUser", ApiInvoker.parameterToString(authUser));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      "application/json;charset=utf-8"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Subscription) ApiInvoker.deserialize(localVarResponse,  "", Subscription.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create a new delivery reclamation for a subscription
  * Authorization header expects the following format ‘OAuth {token}’
   * @param uuid 
   * @param subsno 
   * @param body 
   * @param authUser 
   * @param authorization 
   * @return DeliveryReclamation
  */
  public DeliveryReclamation usersUuidSubscriptionsSubsnoReclamationPost (UUID uuid, Integer subsno, NewDeliveryReclamation body, UUID authUser, String authorization) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidSubscriptionsSubsnoReclamationPost",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidSubscriptionsSubsnoReclamationPost"));
    }
    // verify the required parameter 'subsno' is set
    if (subsno == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'subsno' when calling usersUuidSubscriptionsSubsnoReclamationPost",
        new ApiException(400, "Missing the required parameter 'subsno' when calling usersUuidSubscriptionsSubsnoReclamationPost"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling usersUuidSubscriptionsSubsnoReclamationPost",
        new ApiException(400, "Missing the required parameter 'body' when calling usersUuidSubscriptionsSubsnoReclamationPost"));
    }

    // create path and map variables
    String path = "/users/{uuid}/subscriptions/{subsno}/reclamation".replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString())).replaceAll("\\{" + "subsno" + "\\}", apiInvoker.escapeString(subsno.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("AuthUser", ApiInvoker.parameterToString(authUser));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    String[] contentTypes = {
      "application/json;charset=utf-8"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (DeliveryReclamation) ApiInvoker.deserialize(localVarResponse, "", DeliveryReclamation.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create a new delivery reclamation for a subscription
   * Authorization header expects the following format ‘OAuth {token}’
   * @param uuid    * @param subsno    * @param body    * @param authUser    * @param authorization 
  */
  public void usersUuidSubscriptionsSubsnoReclamationPost (UUID uuid, Integer subsno, NewDeliveryReclamation body, UUID authUser, String authorization, final Response.Listener<DeliveryReclamation> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidSubscriptionsSubsnoReclamationPost",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidSubscriptionsSubsnoReclamationPost"));
    }
    // verify the required parameter 'subsno' is set
    if (subsno == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'subsno' when calling usersUuidSubscriptionsSubsnoReclamationPost",
        new ApiException(400, "Missing the required parameter 'subsno' when calling usersUuidSubscriptionsSubsnoReclamationPost"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling usersUuidSubscriptionsSubsnoReclamationPost",
        new ApiException(400, "Missing the required parameter 'body' when calling usersUuidSubscriptionsSubsnoReclamationPost"));
    }

    // create path and map variables
    String path = "/users/{uuid}/subscriptions/{subsno}/reclamation".replaceAll("\\{format\\}","json").replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString())).replaceAll("\\{" + "subsno" + "\\}", apiInvoker.escapeString(subsno.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("AuthUser", ApiInvoker.parameterToString(authUser));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      "application/json;charset=utf-8"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DeliveryReclamation) ApiInvoker.deserialize(localVarResponse,  "", DeliveryReclamation.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get a delivery reclamation
  * Authorization header expects the following format ‘OAuth {token}’
   * @param uuid 
   * @param subsno 
   * @param reclaimno 
   * @param authUser 
   * @param authorization 
   * @return DeliveryReclamation
  */
  public DeliveryReclamation usersUuidSubscriptionsSubsnoReclamationsReclaimnoGet (UUID uuid, Integer subsno, Integer reclaimno, UUID authUser, String authorization) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidSubscriptionsSubsnoReclamationsReclaimnoGet",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidSubscriptionsSubsnoReclamationsReclaimnoGet"));
    }
    // verify the required parameter 'subsno' is set
    if (subsno == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'subsno' when calling usersUuidSubscriptionsSubsnoReclamationsReclaimnoGet",
        new ApiException(400, "Missing the required parameter 'subsno' when calling usersUuidSubscriptionsSubsnoReclamationsReclaimnoGet"));
    }
    // verify the required parameter 'reclaimno' is set
    if (reclaimno == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reclaimno' when calling usersUuidSubscriptionsSubsnoReclamationsReclaimnoGet",
        new ApiException(400, "Missing the required parameter 'reclaimno' when calling usersUuidSubscriptionsSubsnoReclamationsReclaimnoGet"));
    }

    // create path and map variables
    String path = "/users/{uuid}/subscriptions/{subsno}/reclamations/{reclaimno}".replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString())).replaceAll("\\{" + "subsno" + "\\}", apiInvoker.escapeString(subsno.toString())).replaceAll("\\{" + "reclaimno" + "\\}", apiInvoker.escapeString(reclaimno.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("AuthUser", ApiInvoker.parameterToString(authUser));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (DeliveryReclamation) ApiInvoker.deserialize(localVarResponse, "", DeliveryReclamation.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get a delivery reclamation
   * Authorization header expects the following format ‘OAuth {token}’
   * @param uuid    * @param subsno    * @param reclaimno    * @param authUser    * @param authorization 
  */
  public void usersUuidSubscriptionsSubsnoReclamationsReclaimnoGet (UUID uuid, Integer subsno, Integer reclaimno, UUID authUser, String authorization, final Response.Listener<DeliveryReclamation> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidSubscriptionsSubsnoReclamationsReclaimnoGet",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidSubscriptionsSubsnoReclamationsReclaimnoGet"));
    }
    // verify the required parameter 'subsno' is set
    if (subsno == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'subsno' when calling usersUuidSubscriptionsSubsnoReclamationsReclaimnoGet",
        new ApiException(400, "Missing the required parameter 'subsno' when calling usersUuidSubscriptionsSubsnoReclamationsReclaimnoGet"));
    }
    // verify the required parameter 'reclaimno' is set
    if (reclaimno == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'reclaimno' when calling usersUuidSubscriptionsSubsnoReclamationsReclaimnoGet",
        new ApiException(400, "Missing the required parameter 'reclaimno' when calling usersUuidSubscriptionsSubsnoReclamationsReclaimnoGet"));
    }

    // create path and map variables
    String path = "/users/{uuid}/subscriptions/{subsno}/reclamations/{reclaimno}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString())).replaceAll("\\{" + "subsno" + "\\}", apiInvoker.escapeString(subsno.toString())).replaceAll("\\{" + "reclaimno" + "\\}", apiInvoker.escapeString(reclaimno.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("AuthUser", ApiInvoker.parameterToString(authUser));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DeliveryReclamation) ApiInvoker.deserialize(localVarResponse,  "", DeliveryReclamation.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Unpause users subscription
  * Authorization header expects the following format ‘OAuth {token}’
   * @param uuid 
   * @param subsno 
   * @param authUser 
   * @param authorization 
   * @param startDate 
   * @param endDate 
   * @return Subscription
  */
  public Subscription usersUuidSubscriptionsSubsnoUnpausePost (UUID uuid, Integer subsno, UUID authUser, String authorization, Date startDate, Date endDate) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidSubscriptionsSubsnoUnpausePost",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidSubscriptionsSubsnoUnpausePost"));
    }
    // verify the required parameter 'subsno' is set
    if (subsno == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'subsno' when calling usersUuidSubscriptionsSubsnoUnpausePost",
        new ApiException(400, "Missing the required parameter 'subsno' when calling usersUuidSubscriptionsSubsnoUnpausePost"));
    }

    // create path and map variables
    String path = "/users/{uuid}/subscriptions/{subsno}/unpause".replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString())).replaceAll("\\{" + "subsno" + "\\}", apiInvoker.escapeString(subsno.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "startDate", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "endDate", endDate));
    headerParams.put("AuthUser", ApiInvoker.parameterToString(authUser));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Subscription) ApiInvoker.deserialize(localVarResponse, "", Subscription.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Unpause users subscription
   * Authorization header expects the following format ‘OAuth {token}’
   * @param uuid    * @param subsno    * @param authUser    * @param authorization    * @param startDate    * @param endDate 
  */
  public void usersUuidSubscriptionsSubsnoUnpausePost (UUID uuid, Integer subsno, UUID authUser, String authorization, Date startDate, Date endDate, final Response.Listener<Subscription> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'uuid' is set
    if (uuid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'uuid' when calling usersUuidSubscriptionsSubsnoUnpausePost",
        new ApiException(400, "Missing the required parameter 'uuid' when calling usersUuidSubscriptionsSubsnoUnpausePost"));
    }
    // verify the required parameter 'subsno' is set
    if (subsno == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'subsno' when calling usersUuidSubscriptionsSubsnoUnpausePost",
        new ApiException(400, "Missing the required parameter 'subsno' when calling usersUuidSubscriptionsSubsnoUnpausePost"));
    }

    // create path and map variables
    String path = "/users/{uuid}/subscriptions/{subsno}/unpause".replaceAll("\\{format\\}","json").replaceAll("\\{" + "uuid" + "\\}", apiInvoker.escapeString(uuid.toString())).replaceAll("\\{" + "subsno" + "\\}", apiInvoker.escapeString(subsno.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "startDate", startDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "endDate", endDate));

    headerParams.put("AuthUser", ApiInvoker.parameterToString(authUser));
    headerParams.put("Authorization", ApiInvoker.parameterToString(authorization));

    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Subscription) ApiInvoker.deserialize(localVarResponse,  "", Subscription.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
