/**
 * Persona
 * KSF Media unified login service
 *
 * OpenAPI spec version: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;
import org.openapitools.client.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("ActiveDays".equalsIgnoreCase(className)) {
      return new TypeToken<List<ActiveDays>>(){}.getType();
    }
    
    if ("Address".equalsIgnoreCase(className)) {
      return new TypeToken<List<Address>>(){}.getType();
    }
    
    if ("Campaign".equalsIgnoreCase(className)) {
      return new TypeToken<List<Campaign>>(){}.getType();
    }
    
    if ("DescriptionFrequency".equalsIgnoreCase(className)) {
      return new TypeToken<List<DescriptionFrequency>>(){}.getType();
    }
    
    if ("LoginData".equalsIgnoreCase(className)) {
      return new TypeToken<List<LoginData>>(){}.getType();
    }
    
    if ("LoginDataSSO".equalsIgnoreCase(className)) {
      return new TypeToken<List<LoginDataSSO>>(){}.getType();
    }
    
    if ("LoginDataSoMe".equalsIgnoreCase(className)) {
      return new TypeToken<List<LoginDataSoMe>>(){}.getType();
    }
    
    if ("LoginResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<LoginResponse>>(){}.getType();
    }
    
    if ("ModelPackage".equalsIgnoreCase(className)) {
      return new TypeToken<List<ModelPackage>>(){}.getType();
    }
    
    if ("PackageDescription".equalsIgnoreCase(className)) {
      return new TypeToken<List<PackageDescription>>(){}.getType();
    }
    
    if ("PackageOffer".equalsIgnoreCase(className)) {
      return new TypeToken<List<PackageOffer>>(){}.getType();
    }
    
    if ("Paper".equalsIgnoreCase(className)) {
      return new TypeToken<List<Paper>>(){}.getType();
    }
    
    if ("Product".equalsIgnoreCase(className)) {
      return new TypeToken<List<Product>>(){}.getType();
    }
    
    if ("Subscription".equalsIgnoreCase(className)) {
      return new TypeToken<List<Subscription>>(){}.getType();
    }
    
    if ("SubscriptionDates".equalsIgnoreCase(className)) {
      return new TypeToken<List<SubscriptionDates>>(){}.getType();
    }
    
    if ("User".equalsIgnoreCase(className)) {
      return new TypeToken<List<User>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("ActiveDays".equalsIgnoreCase(className)) {
      return new TypeToken<ActiveDays>(){}.getType();
    }
    
    if ("Address".equalsIgnoreCase(className)) {
      return new TypeToken<Address>(){}.getType();
    }
    
    if ("Campaign".equalsIgnoreCase(className)) {
      return new TypeToken<Campaign>(){}.getType();
    }
    
    if ("DescriptionFrequency".equalsIgnoreCase(className)) {
      return new TypeToken<DescriptionFrequency>(){}.getType();
    }
    
    if ("LoginData".equalsIgnoreCase(className)) {
      return new TypeToken<LoginData>(){}.getType();
    }
    
    if ("LoginDataSSO".equalsIgnoreCase(className)) {
      return new TypeToken<LoginDataSSO>(){}.getType();
    }
    
    if ("LoginDataSoMe".equalsIgnoreCase(className)) {
      return new TypeToken<LoginDataSoMe>(){}.getType();
    }
    
    if ("LoginResponse".equalsIgnoreCase(className)) {
      return new TypeToken<LoginResponse>(){}.getType();
    }
    
    if ("ModelPackage".equalsIgnoreCase(className)) {
      return new TypeToken<ModelPackage>(){}.getType();
    }
    
    if ("PackageDescription".equalsIgnoreCase(className)) {
      return new TypeToken<PackageDescription>(){}.getType();
    }
    
    if ("PackageOffer".equalsIgnoreCase(className)) {
      return new TypeToken<PackageOffer>(){}.getType();
    }
    
    if ("Paper".equalsIgnoreCase(className)) {
      return new TypeToken<Paper>(){}.getType();
    }
    
    if ("Product".equalsIgnoreCase(className)) {
      return new TypeToken<Product>(){}.getType();
    }
    
    if ("Subscription".equalsIgnoreCase(className)) {
      return new TypeToken<Subscription>(){}.getType();
    }
    
    if ("SubscriptionDates".equalsIgnoreCase(className)) {
      return new TypeToken<SubscriptionDates>(){}.getType();
    }
    
    if ("User".equalsIgnoreCase(className)) {
      return new TypeToken<User>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
